# Header comments are preprocessed into replacements:
# wherever lhs is found in file it will be replaced with rhs.
# Names must be in upper case.

# (DATE) :: ([0-9]{4}-[0-9]{2}-[0-9]{2})

# NAME             :: [a-zA-Z_]\w*
# (NAME)           :: ([a-zA-Z_]\w*)
# (SPACED-NAME)    :: \s*([a-zA-Z_]\w*)\s*
# ((COMMA_NAME*))  :: ((\s*,\s*NAME)*)

# ([SPACED-ARRAY]) :: \s*(\[[^\]]*\])?\s

# (")(QUOTED)(")   :: (")([^"]+)(")
# (")((QUOTED))(") :: (")(([^"\\]|\\.)*)(")
# (((ENCLOSING_PARENS))) :: (\()(.*)(\))

# FUNCTION_POSTFIX :: #compiler|#intrinsic|#runtime_support
# (FUNCTION_EOL) :: (\s*#c_call|\s*#no_context|\s*#symmetric)*
# (EOL_COMMENT)  :: (//.*)?


scopeName: source.jai
name: Jai
patterns:
  - include: '#markdown-block-comments'
  - include: '#block-comments'
  - include: '#comments'
  - include: '#imports'
  - include: '#asm'
  - include: '#strings'
  - include: '#deprecated-names'
  - include: '#casts'
  - include: '#keywords'
  - include: '#proc'
  - include: '#deprecated'
  - include: '#fors'
  - include: '#structs'
  - include: '#enums'
  - include: '#enum-members'
  - include: '#composite-literals'
  - include: '#symbols'
  - include: '#support'
  - include: '#numbers'
  - include: '#notes'
  - include: '#declarations'
  - include: '#more-directives'
  - include: '#variables'
  - include: '#more-numbers'
repository:
  asm:
    begin: (#asm)\s*(([A-Z0-9]+)\s*(,[^}]*)?)?(\{)
    end: (\})
    beginCaptures:
      1: name: keyword.other.directive.asm.jai
      3: name: keyword.other.feature.asm.jai
      4:
        patterns:
          - include: '#comma-joined-asm-features'
      5: name: punctuation.section.braces.begin.jai
    endCaptures:
      1: name: punctuation.section.braces.end.jai
    contentName: source.asm.x86_64
    patterns:
      - include: source.asm.x86_64
      - match: (===)
        captures:
          1: name: keyword.operator.pin.jai
  comma-joined-asm-features:
    match: (,)\s*([A-Z0-9]+)\s*
    captures:
      1: name: punctuation.separator.jai
      2: name: keyword.other.feature.asm.jai
  block-comments:
    name: comment.block.jai
    begin: (\/\*)
    end: (\*\/)
    beginCaptures:
      1: name: punctuation.definition.comment.jai
    endCaptures:
      1: name: punctuation.definition.comment.jai
    patterns:
      - name: comment.block.jai
        include: '#block-comments'
      - match: (`)([^`]*)(`)
        captures:
          1: name: markup.quote.comment.jai
          2: name: comment.block.backquoted.jai
          3: name: markup.quote.comment.jai
      - match: (\@)((?i)TODO)([^@]*)
        captures:
          1: name: comment.block.punctuation.annotation.todo.jai
          2: name: comment.block.annotation.todo.jai
          3: name: comment.block.todo.jai
      - match: (\@)((?i)Release)([^@]*)
        captures:
          1: name: comment.block.punctuation.annotation.release.jai
          2: name: comment.block.annotation.release.jai
          3: name: comment.block.release.jai
      - match: (\@)((?i)Note)([^@]*)
        captures:
          1: name: comment.block.punctuation.annotation.note.jai
          2: name: comment.block.annotation.note.jai
          3: name: comment.block.note.jai
      - match: (\@)((?i)Urgent)([^@]*)
        captures:
          1: name: comment.block.punctuation.annotation.urgent.jai
          2: name: comment.block.annotation.urgent.jai
          3: name: comment.block.urgent.jai
      - match: (\@)((?i)Speed)([^@]*)
        captures:
          1: name: comment.block.punctuation.annotation.speed.jai
          2: name: comment.block.annotation.speed.jai
          3: name: comment.block.speed.jai
      - match: (\@)((?i)Robustness)([^@]*)
        captures:
          1: name: comment.block.punctuation.annotation.robustness.jai
          2: name: comment.block.annotation.robustness.jai
          3: name: comment.block.robustness.jai
      - match: (\@)((?i)NoCheckin)([^@]*)
        captures:
          1: name: comment.block.punctuation.annotation.nocheckin.jai
          2: name: comment.block.annotation.nocheckin.jai
          3: name: comment.block.todo.jai
      - match: (\@)(\w+)
        captures:
          1: name: comment.block.punctuation.annotation.jai
          2: name: comment.block.annotation.jai
      - name: comment.block.signature.jai
        match: '(-) (\w+) (DATE)'
        captures:
          1: name: comment.block.punctuation.signature.jai
          2: name: comment.block.signature.name.jai
          3: name: comment.block.signature.date.jai
      - match: ^\s*(\[)( )(\])(.*)
        captures:
          1: name: comment.block.punctuation.checklist.brackets.todo.begin.jai
          2: name: comment.block.punctuation.checklist.mark.todo.jai
          3: name: comment.block.punctuation.checklist.brackets.todo.end.jai
          4:
            name: comment.block.checklist.item.todo.jai
            patterns:
              - include: '#block-comments-line'
      - match: ^\s*(\[)(\.)(\])(.*)
        captures:
          1: name: comment.block.punctuation.checklist.brackets.partial.begin.jai
          2: name: comment.block.punctuation.checklist.mark.partial.jai
          3: name: comment.block.punctuation.checklist.brackets.partial.end.jai
          4:
            name: comment.block.checklist.item.partial.jai
            patterns:
              - include: '#block-comments-line'
      - match: ^\s*(\[)([^ \.])(\])(.*)
        captures:
          1: name: comment.block.punctuation.checklist.brackets.done.begin.jai
          2: name: comment.block.punctuation.checklist.mark.done.jai
          3: name: comment.block.punctuation.checklist.brackets.done.end.jai
          4:
            name: comment.block.checklist.item.done.jai
            patterns:
              - include: '#block-comments-line'
  block-comments-line:
    patterns:
      - match: '(`)([^`]*)(`)'
        captures:
          1: name: markup.quote.comment.jai
          2: name: comment.block.backquoted.jai
          3: name: markup.quote.comment.jai
      - match: (\@)((?i)TODO)([^@]*)
        captures:
          1: name: comment.block.punctuation.annotation.todo.jai
          2: name: comment.block.annotation.todo.jai
          3: name: comment.block.todo.jai
      - match: (\@)((?i)Release)([^@]*)
        captures:
          1: name: comment.block.punctuation.annotation.release.jai
          2: name: comment.block.annotation.release.jai
          3: name: comment.block.release.jai
      - match: (\@)((?i)Note)([^@]*)
        captures:
          1: name: comment.block.punctuation.annotation.note.jai
          2: name: comment.block.annotation.note.jai
          3: name: comment.block.note.jai
      - match: (\@)((?i)Urgent)([^@]*)
        captures:
          1: name: comment.block.punctuation.annotation.urgent.jai
          2: name: comment.block.annotation.urgent.jai
          3: name: comment.block.urgent.jai
      - match: (\@)((?i)Speed)([^@]*)
        captures:
          1: name: comment.block.punctuation.annotation.speed.jai
          2: name: comment.block.annotation.speed.jai
          3: name: comment.block.speed.jai
      - match: (\@)((?i)Robustness)([^@]*)
        captures:
          1: name: comment.block.punctuation.annotation.robustness.jai
          2: name: comment.block.annotation.robustness.jai
          3: name: comment.block.robustness.jai
      - match: (\@)((?i)NoCheckin)([^@]*)
        captures:
          1: name: comment.block.punctuation.annotation.nocheckin.jai
          2: name: comment.block.annotation.nocheckin.jai
          3: name: comment.block.nocheckin.jai
      - match: (\@)(\w+)
        captures:
          1: name: comment.block.punctuation.annotation.jai
          2: name: comment.block.annotation.jai
      - name: comment.block.signature.jai
        match: (-)\s*(.*)\s*(DATE)
        captures:
          1: name: comment.block.punctuation.signature.jai
          2: name: comment.block.signature.name.jai
          3: name: comment.block.signature.date.jai
  comments:
    patterns:
      - match: (//)\s*(\[)( )(\])(.*)
        captures:
          1: name: punctuation.definition.comment.jai
          2: name: comment.line.double-slash.punctuation.checklist.brackets.todo.begin.jai
          3: name: comment.line.double-slash.punctuation.checklist.mark.todo.jai
          4: name: comment.line.double-slash.punctuation.checklist.brackets.todo.end.jai
          5:
            name: comment.line.double-slash.checklist.item.todo.jai
            patterns:
              - include: '#comments-line'
      - match: (//)\s*(\[)(\.)(\])(.*)
        captures:
          1: name: punctuation.definition.comment.jai
          2: name: comment.line.double-slash.punctuation.checklist.brackets.partial.begin.jai
          3: name: comment.line.double-slash.punctuation.checklist.mark.partial.jai
          4: name: comment.line.double-slash.punctuation.checklist.brackets.partial.end.jai
          5:
            name: comment.line.double-slash.checklist.item.partial.jai
            patterns:
              - include: '#comments-line'
      - match: (//)\s*(\[)([^ \.])(\])(.*)
        captures:
          1: name: punctuation.definition.comment.jai
          2: name: comment.line.double-slash.punctuation.checklist.brackets.done.begin.jai
          3: name: comment.line.double-slash.punctuation.checklist.mark.done.jai
          4: name: comment.line.double-slash.punctuation.checklist.brackets.done.end.jai
          5:
            name: comment.line.double-slash.checklist.item.done.jai
            patterns:
              - include: '#comments-line'
      - match: (//)(.*)
        captures:
          1: name: punctuation.definition.comment.jai
          2:
            name: comment.line.double-slash.jai
            patterns:
              - include: '#comments-line'
  comments-line:
    patterns:
      - match: '(`)([^`]*)(`)'
        captures:
          1: name: markup.quote.comment.jai
          2: name: comment.line.double-slash.backquoted.jai
          3: name: markup.quote.comment.jai
      - match: (\@)((?i)TODO)([^@]*)
        captures:
          1: name: comment.line.double-slash.punctuation.annotation.todo.jai
          2: name: comment.line.double-slash.annotation.todo.jai
          3: name: comment.line.double-slash.todo.jai
      - match: (\@)((?i)Release)([^@]*)
        captures:
          1: name: comment.line.double-slash.punctuation.annotation.release.jai
          2: name: comment.line.double-slash.annotation.release.jai
          3: name: comment.line.double-slash.release.jai
      - match: (\@)((?i)Note)([^@]*)
        captures:
          1: name: comment.line.double-slash.punctuation.annotation.note.jai
          2: name: comment.line.double-slash.annotation.note.jai
          3: name: comment.line.double-slash.note.jai
      - match: (\@)((?i)Urgent)([^@]*)
        captures:
          1: name: comment.line.double-slash.punctuation.annotation.urgent.jai
          2: name: comment.line.double-slash.annotation.urgent.jai
          3: name: comment.line.double-slash.urgent.jai
      - match: (\@)((?i)Speed)([^@]*)
        captures:
          1: name: comment.line.double-slash.punctuation.annotation.speed.jai
          2: name: comment.line.double-slash.annotation.speed.jai
          3: name: comment.line.double-slash.speed.jai
      - match: (\@)((?i)Robustness)([^@]*)
        captures:
          1: name: comment.line.double-slash.punctuation.annotation.robustness.jai
          2: name: comment.line.double-slash.annotation.robustness.jai
          3: name: comment.line.double-slash.robustness.jai
      - match: (\@)((?i)NoCheckin)([^@]*)
        captures:
          1: name: comment.line.double-slash.punctuation.annotation.nocheckin.jai
          2: name: comment.line.double-slash.annotation.nocheckin.jai
          3: name: comment.line.double-slash.nocheckin.jai
      - match: (\@)(\w+)
        captures:
          1: name: comment.line.double-slash.punctuation.annotation.jai
          2: name: comment.line.double-slash.annotation.jai
      - name: comment.line.double-slash.signature.jai
        match: (-)\s*(.*)\s*(DATE)
        captures:
          1: name: comment.line.double-slash.punctuation.signature.jai
          2: name: comment.line.double-slash.signature.name.jai
          3: name: comment.line.double-slash.signature.date.jai
  imports:
    patterns:
      - match: ^(SPACED-NAME)(::)\s*(#import)\s+(")(QUOTED)(")
        captures:
          1: name: entity.name.namespace.jai
          2: name: keyword.declaration.jai
          3: name: keyword.control.import.directive.jai
          4: name: punctuation.definition.string.import.begin.jai
          5: name: string-quoted.other.import.jai
          6: name: punctuation.definition.string.import.end.jai
      - match: (#import|#load)\s+(")(QUOTED)(")
        captures:
          1: name: keyword.control.import.directive.jai
          2: name: punctuation.definition.string.import.begin.jai
          3: name: string-quoted.other.import.jai
          4: name: punctuation.definition.string.import.end.jai
      - match: (#import|#load)\s+("[^"]*)?$
        captures:
          1: name: keyword.control.import.directive.jai
          2: name: punctuation.definition.string.import.begin.jai
          3: name: string-quoted.other.import.jai
      - match: ^(SPACED-NAME)(::)\s*(#foreign_(system_)?library)\s+(")(QUOTED)(")
        captures:
          1: name: constant.other.import.jai
          2: name: keyword.declaration.jai
          3: name: keyword.control.import.directive.jai
          5: name: punctuation.definition.string.import.begin.jai
          6: name: string-quoted.other.import.jai
          7: name: punctuation.definition.string.import.end.jai
      - match: ^(SPACED-NAME)(::)\s*(#foreign_(system_)?library)\s+("[^"]*)?$
        captures:
          1: name: constant.other.import.jai
          2: name: keyword.declaration.jai
          3: name: keyword.control.import.directive.jai
          5: name: punctuation.definition.string.import.begin.jai
          6: name: string-quoted.other.import.jai
  keywords:
    patterns:
      - name: keyword.control.conditional.jai
        match: \b(if|ifx|then|else|case)\b
      - name: keyword.control.jump.jai
        match: \b(return|break|continue)\b
      - name: keyword.control.loop.while.jai
        match: \b(while)\b
      - name: keyword.control.loop.for.remove.jai
        match: \b(remove)\b
      - name: keyword.control.defer.jai
        match: \b(defer)\b
      - name: keyword.other.directive.jai
        match: (#add_context|#align|#assert|#bake(_arguments|_constants)?|#caller_location|#code(,null)?|#complete|#dump|#expand|#file|#filepath|#if|#insert|#insert_internal|#intrinsic|#modify|#module_parameters|#must|#no_abc|#no_alias|#no_padding|#no_reset|#place|#placeholder|#procedure_of_call|#program_export|#run|#specified|#symmetric|#this|#through|#type(,(isa|distinct))?|#type_info_none|#type_info_procedures_are_void_pointers|#type_info_no_size_complaint|#unshared)\b
      - name: keyword.other.directive.scope.jai
        match: (#scope_export|#scope_file|#scope_module)
      - name: keyword.other.directive.string.jai
        match: (#char)
      - name: keyword.other.context.jai
        match: \b(context|push_context)\b
      - name: keyword.other.using.jai
        match: \b(using)\b
      - name: constant.language.true.jai
        match: \b(true)\b
      - name: constant.language.false.jai
        match: \b(false)\b
      - name: constant.language.null.jai
        match: \b(null)\b
      - name: keyword.declaration.struct.jai
        match: \b(struct)\b
      - name: keyword.declaration.enum.jai
        match: \b(enum)\b
      - name: keyword.declaration.union.jai
        match: \b(union)\b
      - name: storage.type.jai
        match: \b(int|u8|u16|u32|u64|s8|s16|s32|s64|float|float32|float64|bool|string|void|Code|Type)\b
  casts:
    patterns:
      - match: \b(cast(,trunc)?(,no_check)?(,trunc)?)\s*(\()\s*((\**)NAME)\s*(\))
        captures:
          1: name: keyword.control.cast.jai
          5: name: punctuation.section.parens.begin.jai
          6: name: storage.type
          7: name: keyword.operator.pointer.jai
          8: name: punctuation.section.parens.begin.jai
      - name: keyword.control.cast.jai
        match: \b(xx|cast)\b
  symbols:
    patterns:
      - match: (\})\s*(=)\s*(\.)(NAME)
        captures:
          1: name: punctuation.section.braces.end.jai
          2: name: keyword.declaration.jai
          3: name: punctuation.accessor.jai
          4: name: variable.enum.jai
      - name: keyword.declaration.jai
        match: '(::|:=|:)'
      - name: keyword.operator.jai
        match: (=|\+|-|\*|/|<|>|~|\||&|!|\^)+
      - name: keyword.operator.percent.jai
        match: %
      - name: punctuation.jai
        match: (\.\.)
      - name: punctuation.section.parens.begin.jai
        match: \(
      - name: punctuation.section.parens.end.jai
        match: \)
      - name: punctuation.section.braces.begin.jai
        match: '\{'
      - name: punctuation.section.braces.end.jai
        match: '\}'
      - name: punctuation.section.brackets.begin.jai
        match: '\['
      - name: punctuation.section.brackets.end.jai
        match: '\]'
      - name: punctuation.accessor.jai
        match: (\.)
      - name: punctuation.separator.jai
        match: '(,)'
      - name: punctuation.terminator.jai
        match: (;)
  numbers:
    patterns:
      - match: '[(\[{:\s=.,/*+<>-](0b[01_]+)'
        captures:
          1: name: constant.numeric.jai
      - match: '[(\[{:\s=.,/*+<>-](0x[a-fA-F_\d]+)'
        captures:
          1: name: constant.numeric.jai
      - match: '[(\[\{:\s=.,/*+<>-](\d[\d_]*)'
        captures:
          1: name: constant.numeric.jai
  deprecated:
    match: '(#deprecated\s*((")((QUOTED))("))?)'
    captures:
      1: name: invalid.deprecated.jai
      3: name: punctuation.definition.string.deprecated.begin.jai
      4: name: string-quoted.other.deprecated.jai
      6: name: punctuation.definition.string.deprecated.end.jai
  notes:
    patterns:
      - match: '(@)(NAME)(\()([^)]*)(\))'
        captures:
          1: name: punctuation.definition.annotation.jai
          2: name: variable.annotation.jai
          3: name: punctuation.section.parens.annotation.begin.jai
          4: name: variable.annotation.parameter.jai
          5: name: punctuation.section.parens.annotation.end.jai
      - match: '(@)(NAME)'
        captures:
          1: name: punctuation.definition.annotation.jai
          2: name: variable.annotation.jai
  fors:
    patterns:
      - match: '\b(for)\s+([*<\s]*)(SPACED-NAME)(,)(SPACED-NAME)(:)'
        captures:
          1: name: keyword.control.loop.for.jai
          2: name: keyword.operator.jai
          3: name: variable.other.declaration.jai
          4: name: punctuation.separator.jai
          5: name: variable.other.declaration.jai
          6: name: keyword.declaration.jai
      - match: '\b(for)\s+([*<\s]*)(SPACED-NAME)(:)'
        captures:
          1: name: keyword.control.loop.for.jai
          2: name: keyword.operator.jai
          3: name: variable.other.declaration.jai
          4: name: keyword.declaration.jai
      - match: '\b(for)\s+([*<\s]*)'
        captures:
          1: name: keyword.control.loop.for.jai
          2: name: keyword.operator.jai
  enum-members:
    match: '([^\w])(\.)(NAME)'
    captures:
      1:
        patterns:
          - include: '#expression'
      2: name: punctuation.accessor.jai
      3: name: variable.enum.jai
  structs:
    match: '\b(NAME)\s*(::)\s*(struct)'
    captures:
      1: name: entity.name.struct.jai
      2: name: keyword.declaration.jai
      3: name: keyword.declaration.struct.jai
  enums:
    match: '\b(NAME)\s*(::)\s*(enum(_flags)?)'
    captures:
      1: name: entity.name.enum.jai
      2: name: keyword.declaration.jai
      3: name: keyword.declaration.enum.jai
  declarations:
    patterns:
      - match: \b(NAME)((COMMA_NAME*))\s*(:)([SPACED-ARRAY])*((\**)((#type(,(isa|distinct))?)|NAME))?\s*(:)
        captures:
          1: name: variable.other.constant.declaration.jai
          2:
            patterns:
              - include: '#comma-joined-variables'
          4: name: keyword.declaration.jai
          5:
            patterns:
              - include: '#array'
          6: name: storage.type.jai
          7: name: keyword.operator.pointer.jai
          9: name: keyword.other.directive.jai
          12: name: keyword.declaration.jai
      - match: \b(NAME)\s*(:)([SPACED-ARRAY])*((\**)((#type(,(isa|distinct))?)|NAME))?\s*(:)
        captures:
          1: name: variable.other.constant.declaration.jai
          2: name: keyword.declaration.jai
          3:
            patterns:
              - include: '#array'
          4: name: storage.type.jai
          5: name: keyword.operator.pointer.jai
          7: name: keyword.other.directive.jai
          10: name: keyword.declaration.jai
      - match: \b((it_index|it)|(NAME))((COMMA_NAME*))\s*(:)\s*((struct)|(enum)|(enum_flags))\b\s*(NAME)?
        captures:
          1: name: variable.other.declaration.jai
          2: name: support.variable.jai
          4:
            patterns:
              - include: '#comma-joined-variables'
          6: name: keyword.declaration.jai
          8: name: keyword.declaration.struct.jai
          9: name: keyword.declaration.enum.jai
          10: name: keyword.declaration.enum.jai
          11: name: storage.type.jai
      - match: \b((it_index|it)|(NAME))\s*(:)\s*((struct)|(enum)|(enum_flags))\b\s*(NAME)?
        captures:
          1: name: variable.other.declaration.jai
          2: name: support.variable.jai
          4: name: keyword.declaration.jai
          6: name: keyword.declaration.struct.jai
          7: name: keyword.declaration.enum.jai
          8: name: keyword.declaration.enum.jai
          9: name: storage.type.jai
      - match: \b((it_index|it)|(NAME))((COMMA_NAME*))\s*(:)([SPACED-ARRAY])*((\**)((#type(,(isa|distinct))?)|NAME))?\s*(=)?
        captures:
          1: name: variable.other.declaration.jai
          2: name: support.variable.jai
          4:
            patterns:
              - include: '#comma-joined-variables'
          6: name: keyword.declaration.jai
          7:
            patterns:
              - include: '#array'
          8: name: storage.type.jai
          9: name: keyword.operator.pointer.jai
          11: name: keyword.other.directive.jai
          14: name: keyword.declaration.jai
      - match: \b((it_index|it)|(NAME))\s*(:)([SPACED-ARRAY])*((\**)((#type(,(isa|distinct))?)|NAME))?\s*(=)?
        captures:
          1: name: variable.other.declaration.jai
          2: name: support.variable.jai
          4: name: keyword.declaration.jai
          5:
            patterns:
              - include: '#array'
          6: name: storage.type.jai
          7: name: keyword.operator.pointer.jai
          9: name: keyword.other.directive.jai
          12: name: keyword.declaration.jai
  composite-literals:
    patterns:
      - match: '\b(NAME)?\s*(\.)(\{)'
        captures:
          1: name: storage.type.struct.jai
          2: name: punctuation.accessor.jai
          3: name: punctuation.section.braces.begin.jai
      - match: '\b(NAME)?\s*(\.)(\[)'
        captures:
          1: name: storage.type.struct.jai
          2: name: punctuation.accessor.jai
          3: name: punctuation.section.bracket.begin.jai
  variables:
    patterns:
      - match: '\b((it_index|it)|(NAME))(\.[a-zA-Z0-9_.]+)?\b'
        captures:
          1: name: variable.other.jai
          2: name: support.variable.jai
          4:
            patterns:
              - include: '#members'
    repository:
      members:
        match: '(\.)(NAME)'
        captures:
          1: name: punctuation.accessor.jai
          2: name: variable.other.member.jai
  proc:
    patterns:
      - match: \b(NAME)\s*(::)\s*(#type)\b\s*((inline)\s*|(no_inline)\s*)*(((ENCLOSING_PARENS)))\s*((->)([^{]+))?\s*(((#foreign\s+(NAME(\s*(")((QUOTED))("))?)|FUNCTION_POSTFIX)\s*)+\s*(#deprecated\s*((")((QUOTED))("))?)?\s*(;)?)?(FUNCTION_EOL)
        captures:
          1: name: variable.other.constant.declaration.jai
          2: name: keyword.declaration.jai
          3: name: keyword.other.directive.jai
          5: name: storage.modifier.jai
          6: name: storage.modifier.jai
          7: name: punctuation.section.parens.begin.jai
          8:
            name: meta.function.parameters.jai
            patterns:
              - include: '#parameter-declarations'
          9: name: punctuation.section.parens.end.jai
          11: name: punctuation.return.jai
          12:
            name: meta.function.return-type.jai
            patterns:
              - include: '#return-declarations'
          13: name: keyword.control.import.directive.decl.jai
          16: name: constant.other.import.jai
          18: name: punctuation.definition.string.import.begin.jai
          19: name: string-quoted.other.import.jai
          21: name: punctuation.definition.string.import.end.jai
          22: name: invalid.deprecated.jai
          24: name: punctuation.definition.string.deprecated.begin.jai
          25: name: string-quoted.other.deprecated.jai
          27: name: punctuation.definition.string.deprecated.end.jai
          28: name: punctuation.terminator.jai
          29: name: keyword.other.directive.jai
      - name: meta.function.declaration.jai
        match: \b((main|for_expansion|operator\s*([^ :]+))|NAME)\s*(::)\s*((inline)\s*|(no_inline)\s*)*(((ENCLOSING_PARENS)))\s*((->)([^{]+))?\s*(((#foreign\s+(NAME(\s*(")((QUOTED))("))?)|FUNCTION_POSTFIX)\s*)+\s*(#deprecated\s*((")((QUOTED))("))?)?\s*(;)?)?(FUNCTION_EOL)
        captures:
          1: name: entity.name.function.jai
          2:
            patterns:
              - match: (main)
                captures:
                  1: name: keyword.other.main.jai
              - match: (for_expansion)
                captures:
                  1: name: keyword.other.for_expansion.jai
              - match: '(operator\s*([^ :]+))'
                captures:
                  1: name: keyword.other.operator.jai
                  2: name: keyword.operator.jai
          3: name: keyword.operator.jai
          4: name: keyword.declaration.jai
          6: name: storage.modifier.jai
          7: name: storage.modifier.jai
          8: name: punctuation.section.parens.begin.jai
          9:
            name: meta.function.parameters.jai
            patterns:
              - include: '#parameter-declarations'
          10: name: punctuation.section.parens.end.jai
          12: name: punctuation.return.jai
          13:
            name: meta.function.return-type.jai
            patterns:
              - include: '#return-declarations'
          14: name: keyword.control.import.directive.decl.jai
          17: name: constant.other.import.jai
          19: name: punctuation.definition.string.import.begin.jai
          20: name: string-quoted.other.import.jai
          22: name: punctuation.definition.string.import.end.jai
          23: name: invalid.deprecated.jai
          25: name: punctuation.definition.string.deprecated.begin.jai
          26: name: string-quoted.other.deprecated.jai
          28: name: punctuation.definition.string.deprecated.end.jai
          29: name: punctuation.terminator.jai
          30: name: keyword.other.directive.jai
      - name: meta.function.declaration.jai
        match: \b(NAME)\s*(::)\s*(#bake(_arguments|_constants))\s+(NAME)\s*(((ENCLOSING_PARENS)))
        captures:
          1: name: entity.name.function.jai
          2: name: keyword.declaration.jai
          3: name: keyword.other.directive.jai
          5: name: entity.name.function.jai
          6: name: punctuation.section.parens.begin.jai
          7:
            name: meta.function.parameters.jai
            patterns:
              - include: '#parameters'
          8: name: punctuation.section.parens.end.jai
      - name: meta.function.call.jai
        match: '((NAME)(\.)((NAME)(\.))*)?\b(NAME)\s*(\()(\))'
        captures:
          2: name: entity.name.namespace.jai
          3: name: punctuation.accessor.jai
          5: name: entity.name.namespace.member.jai
          6: name: punctuation.accessor.jai
          7:
            patterns:
              - include: '#support'
              - match: (.*)
                captures:
                  1: name: entity.name.function.jai
          8: name: punctuation.section.parens.begin.jai
          9: name: punctuation.section.parens.end.jai
      - name: meta.function.call.jai
        match: '((NAME)(\.)((NAME)(\.))*)?\b(NAME)\s*(((ENCLOSING_PARENS)))'
        captures:
          2: name: entity.name.namespace.jai
          3: name: punctuation.accessor.jai
          5: name: entity.name.namespace.member.jai
          6: name: punctuation.accessor.jai
          7:
            patterns:
              - include: '#support'
              - match: (.*)
                captures:
                  1: name: entity.name.function.jai
          8: name: punctuation.section.parens.begin.jai
          9:
            name: meta.function.parameters.jai
            patterns:
              - include: '#parameters'
          10: name: punctuation.section.parens.end.jai
    repository:
      parameter-declarations:
        patterns:
          - match: '(,)?\s*(using\s*)?((\$*)NAME)(\s*:=)([^,]*)'
            captures:
              1: name: punctuation.separator.parameters.jai
              2: name: keyword.other.jai
              3: name: variable.parameter.jai
              4: name: punctuation.definition.generic.jai
              5: name: keyword.declaration.jai
              6:
                patterns:
                  - include: '#expression'
          - match: (,)?\s*(using\s*)?((\$*)NAME)\s*(:)\s*(\.\.)?([SPACED-ARRAY])*((\**)($)?NAME)?(\s*=)?([^,]*)
            captures:
              1: name: punctuation.separator.parameters.jai
              2: name: keyword.other.jai
              3: name: variable.parameter.jai
              4: name: punctuation.definition.generic.jai
              5: name: keyword.declaration.jai
              6: name: punctuation.jai
              7: include: '#array'
              8: name: storage.type.jai
              9: name: keyword.operator.pointer.jai
              10: name: punctuation.definition.generic.jai
              11: name: keyword.declaration.jai
              12:
                patterns:
                  - include: '#expression'
      parameters:
        patterns:
          - match: '(,)?\s*((")((QUOTED))("))\s*'
            captures:
              1: name: punctuation.separator.parameters.jai
              2:
                patterns:
                  - include: '#strings'
          - match: (,)?(\s*#code(,null)?)?((cast(,trunc)?(,no_check)?(,trunc)?)\s*(\()\s*((\**)NAME)\s*(\)))?(\s*(NAME)(\s*=))?([^,]*)
            captures:
              1: name: punctuation.separator.parameters.jai
              2: name: keyword.other.directive.jai
              4:
                patterns:
                  - include: '#casts'
              14: name: variable.parameter.jai
              15: name: keyword.operator.jai
              16:
                patterns:
                  - include: '#expression'
      return-declarations:
        patterns:
          - match: (,)?(SPACED-NAME)(:)\s*((\[[^\]]*\])?\s*(\**)(\$*)NAME)\s*(#must)?\s*((@)(NAME))?\s*(#expand)?\s*(((#foreign\s+([A-Z-a-z_]\w*(\s*(")((QUOTED))("))?)|#compiler|#intrinsic|#runtime_support)\s*)+\s*(#deprecated\s*((")((QUOTED))("))?)?\s*(;)?)?(FUNCTION_EOL)\s*(EOL_COMMENT)
            captures:
              1: name: punctuation.separator.parameters.jai
              2: name: variable.parameter.return.jai
              3: name: keyword.declaration.jai
              4: name: storage.type.jai
              5:
                patterns:
                  - include: '#array'
              6: name: keyword.operator.pointer.jai
              7: name: punctuation.definition.generic
              8: name: keyword.other.directive.jai
              10: name: punctuation.definition.annotation.jai
              11: name: variable.annotation.jai
              12: name: keyword.other.directive.jai
              13: name: keyword.control.import.directive.r1.jai
              16: name: constant.other.import.jai
              18: name: punctuation.definition.string.import.begin.jai
              19: name: string-quoted.other.import.jai
              21: name: punctuation.definition.string.import.end.jai
              22: name: invalid.deprecated.jai
              24: name: punctuation.definition.string.deprecated.begin.jai
              25: name: string-quoted.other.deprecated.jai
              27: name: punctuation.definition.string.deprecated.end.jai
              28: name: punctuation.terminator.jai
              29: name: keyword.other.directive.jai
              30:
                patterns:
                  - include: '#comments'
          - match: (,)?\s*((\[[^\]]*\])?\s*(\**)(\$*)NAME)\s*(#must)?\s*((@)(NAME))?\s*(#expand)?\s*(((#foreign\s+([A-Z-a-z_]\w*(\s*(")((QUOTED))("))?)|#compiler|#intrinsic|#runtime_support)\s*)+\s*(#deprecated\s*((")((QUOTED))("))?)?\s*(;)?)?(FUNCTION_EOL)\s*(EOL_COMMENT)
            captures:
              1: name: punctuation.separator.parameters.jai
              2: name: storage.type.jai
              3:
                patterns:
                  - include: '#array'
              4: name: keyword.operator.pointer.jai
              5: name: punctuation.definition.generic
              6: name: keyword.other.directive.jai
              8: name: punctuation.definition.annotation.jai
              9: name: variable.annotation.jai
              10: name: keyword.other.directive.jai
              11: name: keyword.control.import.directive.jai
              14: name: constant.other.import.jai
              16: name: punctuation.definition.string.import.begin.jai
              17: name: string-quoted.other.import.jai
              19: name: punctuation.definition.string.import.end.jai
              20: name: invalid.deprecated.jai
              22: name: punctuation.definition.string.deprecated.begin.jai
              23: name: string-quoted.other.deprecated.jai
              25: name: punctuation.definition.string.deprecated.end.jai
              26: name: punctuation.terminator.jai
              27: name: keyword.other.directive.jai
              28:
                patterns:
                  - include: '#comments'
  more-numbers:
    patterns:
      - match: '(0b[01_]+)'
        captures:
          1: name: constant.numeric.jai
      - match: '(0x[a-fA-F_\d]+)'
        captures:
          1: name: constant.numeric.jai
      - match: '(\d[\d_]*)'
        captures:
          1: name: constant.numeric.jai
  comma-joined-variables:
    match: '(,)\s*((it_index|it)|(NAME))'
    captures:
      1: name: punctuation.separator.jai
      2: name: variable.other.declaration.jai
      3: name: support.variable.jai
  array:
    match: '(\[)([^\]]*)(\])'
    captures:
      1: name: punctuation.section.brackets.begin.jai
      2:
        patterns:
          - include: '#expression'
      3: name: punctuation.section.brackets.end.jai
  expression:
    patterns:
      - include: '#strings'
      - include: '#casts'
      - include: '#deprecated'
      - include: '#enum-members'
      - include: '#keywords'
      - include: '#symbols'
      - include: '#support'
      - include: '#numbers'
      - include: '#variables'
      - include: '#more-numbers'
  more-directives:
    match: '(#foreign\s+([A-Z-a-z_]\w*(\s*(")((QUOTED))("))?)|#compiler|#intrinsic|#runtime_support)'
    captures:
      1: name: keyword.control.import.directive.decl.jai
      3: name: constant.other.import.jai
      5: name: punctuation.definition.string.import.begin.jai
      6: name: string-quoted.other.import.jai
      8: name: punctuation.definition.string.import.end.jai
